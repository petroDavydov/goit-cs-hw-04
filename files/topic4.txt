Multithreading in Python
Last Updated : 02 Jan, 2025
This article covers the basics of multithreading in Python programming language. Just like multiprocessing , multithreading is a way of achieving multitasking. In multithreading, the concept of threads is used. Let us first understand the concept of thread in computer architecture.

What is a Process in Python?
In computing, a process is an instance of a computer program that is being executed. Any process has 3 basic components:

An executable program.
The associated data needed by the program (variables, workspace, buffers, etc.)
The execution context of the program (State of the process)
An Intro to Python Threading
A thread is an entity within a process that can be scheduled for execution. Also, it is the smallest unit of processing that can be performed in an OS (Operating System). In simple words, a thread is a sequence of such instructions within a program that can be executed independently of other code. For simplicity, you can assume that a thread is simply a subset of a process! A thread contains all this information in a Thread Control Block (TCB) :

Thread Identifier: Unique id (TID) is assigned to every new thread
Stack pointer: Points to the thread's stack in the process. The stack contains the local variables under the thread's scope.
Program counter: a register that stores the address of the instruction currently being executed by a thread.
Thread state: can be running, ready, waiting, starting, or done.
Thread's register set: registers assigned to thread for computations.
Parent process Pointer: A pointer to the Process control block (PCB) of the process that the thread lives on.